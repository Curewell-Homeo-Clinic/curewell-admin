// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Patient {
    id               String                 @id @default(cuid())
    createdAt        DateTime               @default(now())
    admittedAt       DateTime               @default(now())
    firstName        String
    lastName         String
    age              Int                    @default(0)
    email            String
    phone            String                 @db.VarChar(10)
    address          String
    occupation       String
    caseStudy        String                 @default("") @db.VarChar(10000)
    prescription     String                 @default("") @db.VarChar(1000)
    appointments     Appointment[]
    invoices         Invoice[]
    treatmentPlans   PatientTreatmentPlan[]
    totalAmmountPaid Float                  @default(0)
    ailments         String                 @default("")
    isDeleted        Boolean                @default(false)
}

model PatientTreatmentPlan {
    id          String        @id @default(cuid())
    plan        TreatmentPlan @relation(fields: [planId], references: [id])
    planId      String
    ammountPaid Float         @default(0)
    patients    Patient       @relation(fields: [patientId], references: [id])
    patientId   String
    invoices    Invoice[]
}

model TreatmentPlan {
    id                   String                 @id @default(cuid())
    createdAt            DateTime               @default(now())
    name                 String
    description          String
    duration             Int                    @default(0) // in days
    price                Float                  @default(0)
    PatientTreatmentPlan PatientTreatmentPlan[]
}

model Invoice {
    id                         String               @id @default(cuid())
    number                     Int                  @default(autoincrement())
    createdAt                  DateTime             @default(now())
    timestamp                  DateTime             @default(now())
    patient                    Patient              @relation(fields: [patientId], references: [id])
    patientId                  String
    doctor                     Doctor               @relation(fields: [doctorId], references: [id])
    doctorId                   String
    products                   Product[]
    productsDiscountPercentage Int                  @default(0)
    consultationFee            Float                @default(0)
    plan                       PatientTreatmentPlan @relation(fields: [planId], references: [id])
    planId                     String
    planAmmountPaying          Float                @default(0)
    totalAmmount               Float                @default(0)
}

model Product {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    name      String
    mRP       Float     @default(0)
    quantity  Int       @default(0)
    images    Image[]
    invoices  Invoice[]
}

model Image {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    url       String
    objectKey String
    products  Product[]
}

model Doctor {
    id             String        @id @default(cuid())
    createdAt      DateTime      @default(now())
    firstName      String
    lastName       String
    email          String
    phone          String
    dob            DateTime
    address        String
    specialization String
    appointments   Appointment[]
    invoices       Invoice[]
}

model Appointment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    patient   Patient  @relation(fields: [patientId], references: [id])
    patientId String
    doctor    Doctor   @relation(fields: [doctorId], references: [id])
    doctorId  String
    progress  String   @default("-") @db.VarChar(255)
    timeStamp DateTime @default(now())
    visited   Boolean  @default(false)
}
